using System;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Windows;
using Microsoft.Win32;
using Vinarstvi.controller;

namespace Vinarstvi.window;

/// <summary>
/// Provides methods for handling various operations in the main window of the application.
/// </summary>
public class MainWindowMethods
{
    
    /// <summary>
    /// Prints the content of a DataTable to a StreamWriter.
    /// </summary>
    /// <param name="writer">The StreamWriter object to write to.</param>
    /// <param name="table">The DataTable to print.</param>
    public static void PrintDataTable(StreamWriter writer, DataTable table)
    {
        // Print headers
        foreach (DataColumn column in table.Columns)
        {
            writer.Write(column.ColumnName.PadRight(20)); // Adjust the padding as needed
            writer.Write(" | ");
        }

        writer.WriteLine();

        // Print separator line
        foreach (DataColumn column in table.Columns)
        {
            writer.Write(new string('-', 20)); // Adjust the length as needed
            writer.Write(" | ");
        }

        writer.WriteLine();

        // Print rows
        foreach (DataRow row in table.Rows)
        {
            foreach (var item in row.ItemArray)
            {
                writer.Write(item.ToString().PadRight(20)); // Adjust the padding as needed
                writer.Write(" | ");
            }

            writer.WriteLine();
        }
    }

    /// <summary>
    /// Handles the Click event of the ReportButton control, generating and saving a summary report.
    /// </summary>
    /// <param name="_dbManager">The DatabaseManager instance to use for database operations.</param>
    public static void ReportButtonMethod(DatabaseManager _dbManager)
    {
        try
            {
                SaveFileDialog saveFileDialog = new SaveFileDialog();
                saveFileDialog.Filter = "Text Files (*.txt)|*.txt";
                saveFileDialog.FileName = "SummaryReport";
                if (saveFileDialog.ShowDialog() == true)
                {
                    string filePath = saveFileDialog.FileName;
                    using (StreamWriter writer = new StreamWriter(filePath))
                    {
                        writer.WriteLine($"============Summary Report - {DateTime.Now}==================");
                        writer.WriteLine();
                        
                        // Get data from the View_Vino_Odruda table
                        DataTable vinoOdrudaTable = _dbManager.GetSummaryData("View_Vino_Odruda");
                        writer.WriteLine("Wines and their Varieties:");
                        MainWindowMethods.PrintDataTable(writer, vinoOdrudaTable);
                        writer.WriteLine();

                        // Get data from the View_Vino_Zakazka table
                        DataTable vinoZakazkaTable = _dbManager.GetSummaryData("View_Vino_Zakazka");
                        writer.WriteLine("Wines and the Number of Orders:");
                        MainWindowMethods.PrintDataTable(writer, vinoZakazkaTable);
                        writer.WriteLine();

                        // Dynamically gather data from additional tables
                        DataTable additionalTables = _dbManager.GetAdditionalTables();
                        foreach (DataRow tableRow in additionalTables.Rows)
                        {
                            string tableName = tableRow["TABLE_NAME"].ToString();
                            DataTable tableData = _dbManager.GetSummaryData(tableName);
                            writer.WriteLine($"{tableName}:");
                            MainWindowMethods.PrintDataTable(writer, tableData);
                            writer.WriteLine();
                        }

                        writer.WriteLine("==================================================================");
                        writer.WriteLine("Report generated by VINARSTVI MANAGER."); // Replace with the actual name
                    }

                    MessageBox.Show("Report has been generated successfully.", "Success", MessageBoxButton.OK,
                        MessageBoxImage.Information);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error generating report: {ex.Message}");
                MessageBox.Show($"Error generating report: {ex.Message}", "Error", MessageBoxButton.OK,
                    MessageBoxImage.Error);
            }
    }
    
    /// <summary>
    /// Deletes a record from the specified entity table by its ID.
    /// </summary>
    /// <param name="entityName">The name of the entity table from which to delete the record.</param>
    /// <param name="id">The ID of the record to delete.</param>
    /// <param name="_dbManager">The DatabaseManager instance to use for database operations.</param>
    public static void DeleteRecordById(string entityName, int id, DatabaseManager _dbManager)
    {
        try
        {
            // Prompt the user for confirmation before deleting the record
            MessageBoxResult result = MessageBox.Show("Are you sure you want to delete this record?", "Confirmation", MessageBoxButton.YesNo, MessageBoxImage.Question);
            if (result == MessageBoxResult.Yes)
            {
                _dbManager.DeleteRecordById(entityName, id);
            }
            else
            {
                // Display a message indicating that deletion was canceled
                MessageBox.Show("Deletion canceled.", "Canceled", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }
        catch (Exception ex)
        {
            // Log or display the exception details
            Debug.WriteLine($"An error occurred: {ex.Message}");
            MessageBox.Show($"An error occurred: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
        }
    }

}